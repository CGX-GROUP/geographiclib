CMake configuration

How this proceeds depends on whether you're building from a release
package or not.  A release package (marked by a file named VERSION at
the top level) has preprocessed man pages and so can be built without
the extra tools needed for processing the pod-style man pages; in
addition, the release package has a configure script (created by
autogen.sh) for autoconf-style builds.

CMake options and variables: see CMakeLists.txt for information

BUILD_SHARED_LIBS ON
BUILD_BOTH_LIBS OFF
BUILD_DOCUMENTATION OFF
USE_BOOST_FOR_EXAMPLES OFF
CONVERT_WARNINGS_TO_ERRORS OFF (ON in non-RELEASE mode)
BUILD_MANPAGES OFF (ON in non-release mode)
GEOGRAPHICLIB_DATA /usr/local/share/GeographicLib or C:/ProgramData/GeographicLib
GEOGRAPHICLIB_PRECISION 2
  1 = float
  2 = double
  3 = extended
  4 = quadruple (boost float128)
  5 = variable (mpreal)

Where things get installed.  Use an empty string to disable that installation

CMAKE_INSTALL_PREFIX
INCDIR "include" "Where to install header files"
BINDIR "bin" "Where to install tools"
SBINDIR "sbin" "Where to install admin tools" ("" for Windows)
LIBDIR "lib" "Where to install libraries"
  this is set to ${CMAKE_INSTALL_LIBDIR} if that's defined
DLLDIR "bin" "Where to install dlls"
MANDIR "share/man" "Where to install the man pages"
CMAKEDIR "lib/cmake/GeographicLib "Where to install cmake configs"
PKGDIR "lib/pkgconfig" "Where to install package config"
DOCDIR "share/doc/GeographicLib" "Where to install documentation"
EXAMPLEDIR "share/doc/GeographicLib-dev" "Where to install examples"

CMAKE_DEBUG_POSTFIX  "The suffix for debug objects" "_d"

Windows only
PACKAGE_DEBUG_LIBS "Include debug versions of library in binary package" OFF

CMake targets

release mode
  all test
  sanitize hygiene check on source files (trailing blanks, etc)
  exampleprograms compile example programs (this is separate cmake config)
  package make binary package for Windows
  package_source make source package

maintainer
  doc (if BUILD_DOCUMENTATION and doxygen found)
  prep-source prep source distribute prior to making release package
  distrib-man create extra versions of man pages
  distrib-all distrib-man + run autogen for autoconf builds
  dist Package release into a tar.gz + zip files
  stage-doc copy documenation to staging area
  stage-dist copy source distribution to staging area
  deploy-doc deploy documentation from staging area to sourceforge
  deploy-dist deploy source distributions from staging area to sourceforge
  develprograms build experimental stuff

Version update checks

Add PROJECT_VERSION_SUFFIX = "-alpha" to
  tar package of source

Do not add PROJECT_VERSION_SUFFIX to
  unpack directory for tar package
  documentation

Debian maintainers
Francesco Paolo Lovergine (QA Page)
Bas Couwenberg (QA Page)

Fedora maintainer
rmattes, smani

vcpkg

    git
      git@github.com:cffk/vcpkg
      git@github.com:microsoft/vcpkg

    Edit ports/geographiclib/

    at top-level
    ./vcpkg remove geographiclib
    rm downloads/<old-tar-file>  # if necessary
    ./vcpkg install 'geographiclib[tools]'
    ls installed/x64-linux/tools/geographiclib

# update vcpkg git@github.com:microsoft/vcpkg
#   dir = ports/geographiclib
#   ./vcpkg install 'geographiclib[tools]'
#   binaries in installed/x64-linux/tools/geographiclib
#   libs in installed/x64-linux/{include,lib,debug/lib}
#   ./vcpkg x-add-version geographiclib
#   commit message = [geographiclib] Update to version $VERSION

conda-forge

# update conda-forge
#   url = git@github.com:conda-forge/geographiclib-cpp-feedstock
#   conda build recipe

    git
      git@github.com:conda-forge/feedstocks
      https://github.com/conda-forge/geographiclib-cpp-feedstock

  /home/scratch/feedstocks/feedstocks/geographiclib-cpp/build_artifacts
  linux-64/geographiclib-cpp-1.52-h4bd325d_1.tar.bz2

Local build of 1.52

  in geographiclib-cpp-feedstock, run
  python build-locally.py linux_64_

creates via docker

  build_artifacts/linux-64/geographiclib-cpp-1.52-h4bd325d_1.tar.bz2

Manual build

[conda remove -y -n build --all]
conda create -y -n build
conda activate build
conda install -y conda-build conda-verify conda-forge-pinning

conda build recipe --variant-config-file $CONDA_PREFIX/conda_build_config.yaml
conda debug recipe --variant-config-file $CONDA_PREFIX/conda_build_config.yaml -p /tmp/condabuild
# additional args? --dirty --keep-old-work

under /tmp/condabuild
  work       -- your checked out out source + conda_build.sh
  _h_env     -- the host environment where "make install" installs to
  _build_env -- the build environment

cd /tmp/condabuild/work
./conda_test_runner.sh
conda_build.sh does a

  conda         activate $PREFIX/_h_env
  conda --stack activate $PREFIX/_build_env

and then builds + installs (into _h_env) your package.

Subsequently you can run your package with

  conda activate /tmp/condabuild/_h_env

Under ${CONDA_PREFIX}/conda-bld

  src_cache has downloaded source
  linux-64 contains completed package geographiclib-cpp-1.52-h2bc3f7f_1.tar.bz2

delete work dirs with
  conda build purge

delete packages with
  conda build purge-all

Completed package retained in

${CONDA_PREFIX}/pkgs

Unused cmake variables
    CMAKE_FIND_ROOT_PATH Used by find_package and find_library
    CMAKE_FIND_ROOT_PATH_MODE_LIBRARY Used by find_library
    CMAKE_INSTALL_LIBDIR Gnu lib installation dir

Under ${CONDA_PREFIX}/conda-bld/geographiclib-cpp_1647616815675
cmake's source directory =
  work_moved_geographiclib-cpp-1.52-h2bc3f7f_1_linux-64
renamed from work
has patches applied
+ metadata_conda_debug.yaml = meta.yaml with variables substituted
+ conda_build.sh = build.sh + a header

cmake's binary directory
work_moved_geographiclib-cpp-1.52-h2bc3f7f_1_linux-64/build
GeographicLib_SOURCE_DIR = work
CMAKE_INSTALL_PREFIX:PATH=/home/ckarney/miniconda3/envs/build/conda-bld/geographiclib-cpp_1647616815675/_h_env_....

Installation directory gets renamed to
${CONDA_PREFIX}/conda-bld/geographiclib-cpp_1647616815675/_h_env_moved_geographiclib-cpp-1.52-h2bc3f7f_1_linux-64

${CONDA_PREFIX}/conda-bld/geographiclib-cpp_1647616815675/_test_env... is for running tests

Docker command to debug conda builds for Centos 7
docker run -ti -v `pwd`:/tmp/source  quay.io/condaforge/linux-anvil-cos7-x86_64 bash
** Need to clean up conda stuff **

binaries for cgi scripts
ssh -t karney,geographiclib@shell.sourceforge.net create
# git: /home/git/p/geographiclib/code.git
# web: /home/project-web/geographiclib
# files: /home/frs/project/geographiclib
run compile.sh

VERSION=2.0
FULLVERSION=$VERSION-alpha
rm -rf /tmp/GeographicLib-$VERSION /tmp/geog-$VERSION
tar xfpzC /home/frs/project/geographiclib/distrib-C++/GeographicLib-$FULLVERSION.tar.gz /tmp
cd /tmp/GeographicLib-$VERSION
# N.B. $HOME/cmake/bin is in PATH for cmake
cmake \
    -D CMAKE_INSTALL_PREFIX=/tmp/geog-$VERSION \
    -D BUILD_SHARED_LIBS=OFF \
    -D GEOGRAPHICLIB_PRECISION=3 \
    -D EXAMPLEDIR= -B BUILD -S .
cd BUILD
make
make install
mkdir -p /home/project-web/geographiclib/bin-$VERSION
cd /tmp/geog-$VERSION/bin
install CartConvert ConicProj GeodesicProj GeoConvert GeodSolve GeoidEval Gravity MagneticField Planimeter RhumbSolve TransverseMercatorProj /home/project-web/geographiclib/bin-$VERSION/

When ready for switch over, do
cd /home/project-web/geographiclib
rm bin
ln -s bin-$VERSION bin

From test-distribution.sh

# Also to do
# post release notices
# set default download files
# make -f makefile-admin distrib-{cgi,html}
# update home brew
#   dir = /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core
#   branch = geographiclib/$VERSION
#   file = Formula/geographiclib.rb
#   brew install --build-from-source geographiclib
#   commit message = geographiclib $VERSION
# update binaries for cgi applications
# trigger build on build-open
